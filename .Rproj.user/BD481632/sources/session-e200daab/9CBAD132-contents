---
title: "Overall LASSO Model for smRNA Biomarkers"
author: "Alison Yu"
date: "2024-08-11"
output: html_document
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Purpose

This script creates the ERD Prediction model for the Step Counts Data 

```{r}
### ************************************************************************** ###
# Project folders: Stats: '\\duhsnas-pri\dusom_cfa\Private\Statistics\StudiesPro00103483_PRIME KNEE\'
#                  IRB: ' \\duhsnas-pri\dusom_cfa\Private\IRBStudies\StudiesPro00103483_PRIME KNEE\'
# Author: Alison Yu
# Created date: August 11, 2024
#
# Modified dates:  
#
#                 
# Input:  project folder IRB - data/*
#         
#         
# Output: project folder Stats - output/*
#         
# 
### ************************************************************************** ###
```


# Libraries and other setup

```{r echo = FALSE}
##### Packages Needed ##### 
library(dplyr)
library(caret)
library(glmnet)
library(tidyr)
library(mpath)
library(readxl)

##### clear existing data and graphics #####  
rm(list=ls())
graphics.off()


##### working directory ##### 

### working directory is project folder Stats/programs/
setwd("//duhsnas-pri/dusom_cfa/Private/Statistics/Studies/Pro00103483_PRIME KNEE/programs/")


# To render this document: 
# rmarkdown::render(input = "70_Alison_OverallsmRNALASSOModel_20240811.Rmd", output_dir = "../output/", output_file = "70_Alison_OverallsmRNALASSOModel_20240811.html", clean = FALSE)
```

# Read in Data 

```{r}
### Need the outcome ERD data and the covariates smRNA data
smRNA_dat = read_excel("Y:/IRBstudies/Pro00103483_PRIME KNEE/data/Original/Biomarkers/PRIME_smRNA_RawCounts_3-7-2024.xlsx")

ERD_dat = readRDS("Y:/IRBstudies/Pro00103483_PRIME KNEE/data/Derived/30_ERDPredictionModels_20240710.RDS")

```



# Cleaning Predictor and Outcome data

```{r}
# getting only the baseline values for smRNA data
smRNA_baseline_dat = smRNA_dat |>
  select(c("Name",contains("BL")))

# reshaping the smRNA dataset (151 unique subject ids)
df_long = pivot_longer(smRNA_baseline_dat, cols = -Name, names_to = "Variable", values_to = "Value")

df_wide = pivot_wider(df_long, names_from = Name, values_from = Value)
smRNA_baseline_transformed = df_wide
names(smRNA_baseline_transformed)[1] = "subject_long_id"
smRNA_baseline_transformed$subject_id = substr(smRNA_baseline_transformed$subject_long_id, 1, 5)
smRNA_baseline_transformed = smRNA_baseline_transformed[,c(ncol(smRNA_baseline_transformed),
                                                           1:(ncol(smRNA_baseline_transformed)-1))]


# scaling the smRNA values
smRNA_scaled = cbind(smRNA_baseline_transformed[,1:2], smRNA_baseline_transformed[,-c(1:2)] |>
  select(where(~sum(.)>=50)))
# selected only columns where count was at least 50

smRNA_scaled[,(3:ncol(smRNA_scaled))] = apply(smRNA_scaled[, 3:ncol(smRNA_scaled)], 2, function(x) {
  if (all(x == 0)) {
    return(x)  # Return the column unchanged if all values are zero
  } else {
    return(scale(x))  # Otherwise, scale the column
  }
})
smRNA_scaled = smRNA_scaled |> select(-subject_long_id)

# subset only the people with at least one ERD from ERD_dat
## all rows/patients have at least one ERD values
ERD_columns = c(names(ERD_dat)[2:5])
ERD_filtered_dat = ERD_dat[apply(ERD_dat[ERD_columns], 1, function(row) any(!is.na(row))), ]

ERD_sc_dat = ERD_filtered_dat |>
  filter(!is.na(ERD_stepcounts)) |>
  select(subject_id, scaled_stepcounts)

# 101 patients in the sc dataset
final_sc_smRNA = inner_join(ERD_sc_dat, smRNA_scaled, by = "subject_id") |>
  select(-subject_id) 
```


```{r}
## Modeling
### Create a hyperparameter grid 
gridsearch <- expand.grid(
  alpha = seq(0,0.9,0.1), # using LASSO
  # NOTE: Use different lambda values
  lambda = seq(0, 1, length.out = 100)  # Vary lambda values
)


### regression formula 
regressionformula <- as.formula("scaled_stepcounts ~ .")


### set up CV
train_control <- trainControl(
  method = "cv",  # Cross-validation method (e.g., k-fold)
  number = nrow(final_sc_smRNA),    # Number of folds
  savePredictions = TRUE,
  allowParallel = FALSE
)

# train_control <- trainControl(
#   method = "cv",  # Cross-validation method (e.g., k-fold)
#   number = 10,    # Number of folds
#   savePredictions = TRUE,
#   allowParallel = FALSE
# )




### set seed 
set.seed(1395571)

### train model 
model <- train(
  regressionformula,
  data = final_sc_smRNA,
  trControl = train_control,
  method = "glmnet",     # Specify the regularization method
  tuneGrid = gridsearch,
  preProcess = NULL      # No pre-processing
)


#### 
# FIRST PRINT THE RESULTS 
model$results

### 
best_lambda = model$bestTune$lambda
##### best_lambda is 14348907 using 10-fold cv
best_lambda


### final model 
final_model = glmnet(final_sc_smRNA[,2:ncol(final_sc_smRNA)] , 
                     final_sc_smRNA$scaled_stepcounts,
                     alpha = 1, lambda = 0.2261307)

abs(coef(final_model)[,1]) %>% sort(decreasing = TRUE) %>% head(10)



y_predicted <- predict(final_model,
                       s = 0.2261307,
                       newx = final_sc_smRNA[,2:ncol(final_sc_smRNA)] |> as.matrix())

#find SST and SSE
sst <- sum((final_sc_smRNA$scaled_stepcounts - mean(final_sc_smRNA$scaled_stepcounts))^2)
sse <- sum((y_predicted - final_sc_smRNA$scaled_stepcounts)^2)

#find R-Squared
rsq <- 1 - sse/sst
rsq

### plot 
plot(final_sc_smRNA$scaled_stepcounts, y_predicted)

```







