---
title: "Hreha -- K01 Deriving Stroke"
author: "Marissa Ashner"
date: "2024-06-05"
output: 
  html_document:
    toc: true
    toc_float:
        collapsed: true
        smooth_scroll: true
---


```{r setup, include=FALSE}
# setting global options for code chunks
knitr::opts_chunk$set(echo = TRUE)
```


# Purpose

This script derives the set of stroke survivors to be used for the analysis cohort. Uses the data that includes Visit 7. 

```{r}
### ************************************************************************** ###
# Project folder: '//duhsnas-pri/dusom_cfa/Private/IRBstudies/Pro00111521_K01_award- Kimberly Hreha/'
# File name: 'programs/0_DerivingStroke_20240605.Rmd'
# Author: Marissa Ashner
# Created date: June 5, 2024
#
# Modified dates:  
#     - 
#                 
# Input:  project folder - data/Original/ARIC_2023/*
#         
# Output: project folder - data/Derived/*
# 
### ************************************************************************** ###
```


# Libraries and other setup

```{r echo = FALSE}
##### Packages Needed ##### 
library(dplyr)


##### clear existing data and graphics #####  
rm(list=ls())
graphics.off()

##### working directory ##### 

### working directory is \\duhsnas-pri\dusom_cfa\Private\IRBstudies\Pro00111521_K01_award- Kimberly Hreha\programs\
setwd("//duhsnas-pri/dusom_cfa/Private/IRBstudies/Pro00111521_K01_award- Kimberly Hreha/programs/")

# To render this document: 
# rmarkdown::render(input = "0_DerivingStroke_20240605.Rmd", output_dir = "../output/", output_file = "0_DerivingStroke_20240605.html")
```

# Reading in Data 

Need to read in some data from Visits 1, 5, 6, 7 and the surveillance stroke information

```{r}
#### Read in Data ##### 

###############################
##### Visit 1 Information #####
###############################

# tia/stroke
tiab03 = haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v1/tiab03.sas7bdat"))

# home interview 
hom = haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v1/hom.sas7bdat"))

##### select ID, enrollment year, stroke/TIA from TIA, stroke from HOM
visit1 = left_join(tiab03 %>% select(ID_C, TIAB01), 
                   hom %>% select(ID_C, HOM10D), 
                   by = "ID_C")

###############################
##### Visit 5 Information #####
###############################

# derived variables
derive51 =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v5/derive51.sas7bdat"))

## to get visit 5 year 
visit5_sbp =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v5/sbp.sas7bdat"))

visit5_ant = haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v5/ant.sas7bdat"))

## select ID, prevalent stroke, years from ANT and SBP
visit5 = derive51 %>% select(ID_C, PRVSTR51) %>% 
  left_join(visit5_ant %>% select(ID_C, ANT0AY), by = "ID_C") %>% 
  left_join(visit5_sbp %>% select(ID_C, SBP0AY), by = "ID_C") %>% unique() %>% 
  mutate(V5_YEAR = pmin(ANT0AY, SBP0AY, na.rm = TRUE))


###############################
##### Visit 6 Information #####
###############################

# derived variables
derive61 =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/V6/derive61.sas7bdat"))

## to get visit 6 year 
visit6_sbp =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/V6/sbp.sas7bdat"))

visit6_ant = haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/V6/ant.sas7bdat"))

##### select ID, prevalent stroke, years from SBP, ANT
visit6 = derive61 %>% select(ID_C, PRVSTR61) %>% 
  left_join(visit6_ant %>% select(ID_C, ANT0AY), by = "ID_C") %>% 
  left_join(visit6_sbp %>% select(ID_C, SBP0AY), by = "ID_C") %>% unique() %>% 
  mutate(V6_YEAR = pmin(ANT0AY, SBP0AY, na.rm = TRUE))

###############################
##### Visit 7 Information #####
###############################

# derived variables
derive71 =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/V7/derive71.sas7bdat"))

# derived variables from Visit 1 for Year info 
derive13 = haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/v1/derive13.sas7bdat")
)

##### select ID, prevalent stroke, age
visit7 = derive71 %>% select(ID_C, PRVSTR71, V7AGE71) %>% 
  left_join(derive13 %>% select(ID_C, V1AGE01, ENROLL_YR), by = "ID_C") %>% 
  mutate(V7_YEAR = ENROLL_YR + (V7AGE71-V1AGE01)) %>% 
  select(-V7AGE71, -V1AGE01, -ENROLL_YR)
visit7$V7_YEAR[visit7$V7_YEAR == 2017] <- 2018
visit7$V7_YEAR[visit7$V7_YEAR == 2020] <- 2019

####################################
##### Stroke Surveillance Data #####
####################################

### derived stroke variables
cderps18 =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/cohort_Stroke/cderps18.sas7bdat"))

### raw stroke variables
cstrps18 =  haven::read_sas(
  unzip("../data/Original/ARIC_2023.zip",
        "Main_Study/cohort_Stroke/cstrps18.sas7bdat")) 
```

# Deriving Stroke Prior to Study 

### Don't end up using this -- Don't run code in this iteration.

Someone will be defined as having a stroke prior to the study if they (1) answer Yes to HOM10D () from the home interview at Visit 1, or (2) answer Yes to TIAB01 () from the TIA/Stroke table at Visit 1. If both HOM10D and TIAB01 are answered No, there was no stroke prior to study. If one was answered No and one missing, or both missing, set to missing.

```{r, eval = FALSE}
##### Deriving Stroke Prior to Study ##### 

### change "" to NA
visit1[visit1 == ""] <- NA

baseline_stroke_survivor = visit1 %>% select(ID_C, HOM10D, TIAB01) %>%
  mutate(baseline_stroke = ifelse(HOM10D == "Y" | TIAB01 == "Y", "Y", "N"))

table(baseline_stroke_survivor$baseline_stroke, useNA="ifany")

```


# Deriving Stroke Survivors

Someone will be defined as being a stroke survivor if they were hospitalized due to a stroke event that was captured by the surveillance information. 

All stroke events from a surveillance information were considered. Participants were included as a stroke survivor if they had a stroke event with a final diagnosis of DEF_SAH, PROB_SAH, DEF_IPH, PROB_IPH, DEF_TIB, PROB_TIB, DEF_EIB, PROB_EIB, or POSS_STR. Participants were excluded if their stroke event was fatal, they had a final diagnosis of NO_STR, or they met an exclusionary condition defined [here](https://aric.cscc.unc.edu/aric9/sites/default/files/public/surveillancedata/SDXD_Form.pdf).

```{r}
##### Deriving Stroke Survivors ##### 

### combine the stroke information, selecting the IDs, year of stroke event, final diagnosis, event type, information about stroke/TIA history, and information about vision impairments from the stroke event
stroke_surveillance = left_join(cderps18 %>% select(ID_S0, ID_C, YEAR, FINAL_DX, EVENTYPE), 
                                cstrps18 %>% 
                                  select(ID_S0, STRC23, STRC24Y, STRC25Y, 
                                         STRC26, STRC27AY, STRC27BY,
                                         STRC9, STRX10,
                                         STRC38A, STRC39A, STRC46A), by = "ID_S0")

# all stroke hospitalizations 
nrow(stroke_surveillance)
unique(stroke_surveillance$ID_C) %>% length()

### exclude those with a fatal stroke event
fatal_ids = unique((stroke_surveillance %>% filter(EVENTYPE != "N" & YEAR < 2011))$ID_C)
stroke_surveillance_nonfatal = stroke_surveillance %>% filter(!(ID_C %in% fatal_ids) & EVENTYPE == "N")

# those with (non)fatal events
length(fatal_ids)
unique(stroke_surveillance_nonfatal$ID_C) %>% length()
nrow(stroke_surveillance_nonfatal)

### exclude those who met exclusionary criteria 
excond_ids = (stroke_surveillance_nonfatal %>% filter(FINAL_DX == "EXCOND"))$ID_S0 
stroke_surveillance_nonfatal_excond = stroke_surveillance_nonfatal %>% filter(!(ID_S0 %in% excond_ids))

# those with exclusionary criteria 
length(excond_ids)
unique(stroke_surveillance_nonfatal_excond$ID_C) %>% length()
nrow(stroke_surveillance_nonfatal_excond)

### exclude those with no stroke as a final diagnosis
nostr_ids = (stroke_surveillance_nonfatal_excond %>% filter(FINAL_DX == "NO_STR"))$ID_S0
stroke_surveillance_confirmed = stroke_surveillance_nonfatal_excond %>% filter(!(ID_S0 %in% nostr_ids))

# those with no stroke diagnosis 
length(nostr_ids)
unique(stroke_surveillance_confirmed$ID_C) %>% length()
nrow(stroke_surveillance_confirmed)
```

# Visit 5 Strokes

```{r}
##### Deriving Stroke at Visit 5 #####

### combine with visit 5 data
### keep stroke events where the event year was less than the visit 5 year 
visit_5_strokes = left_join(visit5, stroke_surveillance_confirmed, by = "ID_C") %>% 
  filter(YEAR < V5_YEAR) 
nrow(visit_5_strokes)
unique(visit_5_strokes$ID_C) %>% length()

# take most recent stroke if multiple 
visit_5_strokes = visit_5_strokes %>% 
  group_by(ID_C) %>% slice_max(YEAR)

# who had multiple events the same year?
### keep the ones with the larger most recent stroke year
ids = visit_5_strokes[duplicated(visit_5_strokes$ID_C),]$ID_C
visit_5_strokes %>% filter(ID_C %in% ids) %>% select(ID_C, YEAR, STRC23, STRC24Y, STRC25Y)

### final data frame
visit_5_strokes = visit_5_strokes %>% group_by(ID_C) %>% slice_max(STRC25Y)

### Compare to the derive stroke variable from ARIC
table(visit_5_strokes$PRVSTR51, useNA= "ifany")
```

# Visit 6 Strokes

```{r}
##### Deriving Stroke at Visit 6 #####

### combine with visit 6 data
### keep stroke events where the event year was less than the visit 6 year 
visit_6_strokes = left_join(visit6, stroke_surveillance_confirmed, by = "ID_C") %>% 
  filter(YEAR < V6_YEAR) 
nrow(visit_6_strokes)
length(unique(visit_6_strokes$ID_C))

# take most recent stroke 
visit_6_strokes = visit_6_strokes %>% 
group_by(ID_C) %>% slice_max(YEAR)

# who had multiple events the same year?
### keep the ones with the larger most recent stroke year
### for the one with no recent stroke year info, pick the one that shows up first in the data frame
ids = visit_6_strokes[duplicated(visit_6_strokes$ID_C),]$ID_C
visit_6_strokes %>% filter(ID_C %in% ids) %>% select(ID_C, YEAR, STRC23, STRC24Y, STRC25Y)

### final data frame
visit_6_strokes = visit_6_strokes %>% group_by(ID_C) %>% slice_max(STRC25Y) %>% slice_head(n=1)

### Compare to the derive stroke variable from ARIC
table(visit_6_strokes$PRVSTR61, useNA= "ifany")
```

# Visit 7 Strokes

```{r}
##### Deriving Stroke at Visit 7 #####

### combine with visit 7 data
### keep stroke events where the event year was less than the visit 7 year 
visit_7_strokes = left_join(visit7, stroke_surveillance_confirmed, by = "ID_C") %>% 
  filter(YEAR < V7_YEAR) 
nrow(visit_7_strokes)
length(unique(visit_7_strokes$ID_C))

# keep most recent stroke
visit_7_strokes = visit_7_strokes %>% 
group_by(ID_C) %>% slice_max(YEAR)

# who had multiple events the same year?
### keep the ones with the larger most recent stroke year
ids = visit_7_strokes[duplicated(visit_7_strokes$ID_C),]$ID_C
visit_7_strokes %>% filter(ID_C %in% ids) %>% select(ID_C, YEAR, STRC23, STRC24Y, STRC25Y)

### final data frame
visit_7_strokes = visit_7_strokes %>% group_by(ID_C) %>% slice_max(STRC25Y)

### Compare to the derive stroke variable from ARIC
table(visit_7_strokes$PRVSTR71, useNA= "ifany")
```


# Saving the Output Datatsets

```{r}
##### Output Datasets with relevant stroke information ##### 

### Save IDs, final diagnosis, vision impairment information, and whether or not they had a stroke prior to baseline

# Visit 5
visit_5_strokes_output = visit_5_strokes %>% 
  select(ID_C, FINAL_DX, starts_with("STRC") & ends_with("A"), 
         YEAR)

saveRDS(visit_5_strokes_output, "../data/Derived/0_Visit5Strokes_20240605.RDS")

# Visit 6
visit_6_strokes_output = visit_6_strokes %>% 
  select(ID_C, FINAL_DX, starts_with("STRC") & ends_with("A"), 
         YEAR)

saveRDS(visit_6_strokes_output, "../data/Derived/0_Visit6Strokes_20240605.RDS")

# Visit 7
visit_7_strokes_output = visit_7_strokes %>% 
  select(ID_C, FINAL_DX, starts_with("STRC") & ends_with("A"), 
         YEAR)

saveRDS(visit_7_strokes_output, "../data/Derived/0_Visit7Strokes_20240605.RDS")
```


# Session information

```{r echo = FALSE, results = 'markup'}
sessionInfo()
```


