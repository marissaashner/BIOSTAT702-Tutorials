final_lepadl_smRNA_cov = final_lepadl_smRNA[,-1]
final_lepadl_smRNA_cov = final_lepadl_smRNA_cov %>% 
  select(where(~ length(unique(.)) > 25))

#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(final_sc_smRNA[,-1] %>% as.matrix(), 
                      final_sc_smRNA$scaled_stepcounts, 
                      lambda = seq(0, 0.6, length.out = 200),
                                            alpha = 1, 
                                            type.measure = "mse",
                                            nfolds = 101)

#find optimal lambda value that minimizes test MSE
best_lambda_painintensity_lassocv <- cv_model_painintensity_lassocv$lambda.min

#produce plot of test MSE by lambda value
plot(cv_model) 



#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(final_variables_stepcounts[,-73] %>% as.matrix(), 
                      final_variables_stepcounts$response_stepcounts, 
                   #   lambda = seq(0, 0.6, length.out = 200),
                      alpha = 1, 
                      type.measure = "mse",
                      nfolds = nrow(final_variables_stepcounts))





?results = stabs::stabsel(final_sc_smRNA[,-1] %>% as.matrix(), 
               final_sc_smRNA$scaled_stepcounts, 
               fitfun = glmnet.lasso, 
               q = 10, 
               PFER = 2, 
               B = 200)

elastic_net <- function(x, y, alpha = 0.5, threshold = 1e-4, ...) {
  fit <- glmnet(x, y, alpha = alpha, ...)
  selected <- apply(coef(fit), 1, function(coef) abs(coef) > threshold)
  selected <- matrix(selected, nrow = nrow(coef(fit)), byrow = TRUE)  # Ensure correct dimension
  return(list(fit = fit, selected = selected, lambda = fit$lambda))
}






