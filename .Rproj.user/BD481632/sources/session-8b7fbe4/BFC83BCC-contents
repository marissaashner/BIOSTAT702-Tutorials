---
title: "BIOSTAT702 R Tutorial 1: "
subtitle: "Descriptive Presentation of Variables"
author: "Marissa Ashner, PhD"
date: "Last Updated: 2024-08-05"
output: 
  html_document:
    theme: cosmo
    fig_width: 7
    fig_height: 5
    toc: true
    toc_float:
      collapsed: true
      smooth_scroll: true
---

```{css, echo=FALSE}
pre {
  max-height: 300px;
  overflow-y: auto;
}
h1.title{
  font-size: 30px;
  font-weight: bold;
  margin-bottom: 0px;
}
h1 {
  font-size: 20px;
}
h2{
  font-size: 16px;
}
h3.subtitle {
  font-size: 25px;
  font-style: italic;
  margin-top: 3px;
}
h3{
  font-size: 14px;
}
h4{
  font-size: 13px;
}
body, code.r, pre{
  font-size: 12px;
}
```


```{r setup, include=FALSE}
# setting global options for code chunks
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE)
```

This tutorial will follow closely with Chapter 3 in the [textbook](https://bookdown.org/rwnahhas/RMPH/datasumm.html).

# Packages 

The following code loads the packages you need for the tutorial.

```{r, message = FALSE}
## NOTE: If you do not have a package installed, you must install it first
# For example, you can run the following code if you don't have the gtsummary package:
# install.packages("gtsummary")


# for navigating within the R project
library(here)

# for data wrangling 
library(tidyverse)

# for creating table 1 
library(gtsummary)
library(table1)
library(tableone)
library(labelled)

# for exporting table 1 
library(flextable)
library(gt)
```

# Resources

Below is a list of resources that may be helpful or provide more information on this topic. 

- [R Charts -- Super cool website for plotting in R using ggplot and base R](https://r-charts.com/)
- [R Graph Gallery -- Another super cool website for ploting in R, focusing on ggplot/tidyverse](https://r-graph-gallery.com/)
- [Helpful vignette for the table1 package](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html)
- [Vignette for tableone package](https://rstudio-pubs-static.s3.amazonaws.com/13321_da314633db924dc78986a850813a50d5.html)

# Load Data 

```{r}
# Load Data 
# will be called "nhanes_adult_exam_sub" in your environment 
load(here("data/nhanes1718_adult_exam_sub_rmph.Rdata"))

# rename dataset for convenience 
nhanes <- nhanes_adult_exam_sub
```

# Examining the Data 

## Numerically

The first thing you want to do with a dataset before analyzing it is examine all the variables you will be using. You want to look at the distributions and formats of your variables, as well as check for unreasonable values and missing values. 

### str()

The `str()` function will display the dimensions of the data frame, as well as the structure of each variable. We are just showing the first 10 variables, for brevity.

```{r}
str(nhanes[,1:10])
```

### summary()

The `summary()` function will display some basic descriptive statistics for each of the variables in the dataset, as shown below, including the number of missing values. 

```{r}
summary(nhanes[,1:10])
```

### Computations of individual descriptive statistics 

Rather than summarizing all the variables and statistics, you can also run functions that calculate one statistic for one (or more) variable. If there are missing values, the `na.rm = TRUE` argument is needed to remove them from the calculation.

These include (but are not limited to): 

  -   `mean()`
  -   `sd()` (standard deviation)
  -   `median`
  -   `IQR`
  -   `quantile` (can specify quantiles)
  -   `min`
  -   `max`
  -   `sum(complete.cases())` (number of non-missing values)

For example: 

```{r}
# mean of SBP variable
mean(nhanes$sbp, na.rm = TRUE)

# every 10th percentile of the SBP variable
quantile(nhanes$sbp, 
         probs = seq(0, 1, 0.1), 
         na.rm = TRUE)

# how many complete cases in the SBP variable
sum(complete.cases(nhanes$sbp))
```

### Tables 

You can also use the `table()` (or `prop.table()`) function for categorical variables to examine the frequency and prportion of observations at each level. Typically, the option `useNA = "ifany"` is used for frequency tables.

```{r}
# frequency table for the income variable 
table(nhanes$income, useNA = "ifany")

# proportion table for the income variable
prop.table(table(nhanes$income, useNA = "ifany"))
```

You can also create 2-way (or 3-way) tables. 

```{r}
# 2-way table with the income and gender variables 
table(nhanes$income, nhanes$RIAGENDR, useNA = "ifany")
```

## Graphically 

While there are many ways to visualize data in complex wayss, here we show common ways to visualize a single continuous or categorical variable as a way of describing the variable for the analysis team. 

For continuous variables, typically a histogram is created using the `hist()` function in base R or the `geom_histogram()` function in `ggplot2`. Base R is most convenient for easy, simply plots. I recommend ggplot for anything you want to output to a wider audience.

```{r}
# histogram for the SBP variable in base R 
hist(nhanes$sbp)

# histogram for the SBP variable in ggplot
ggplot(data = nhanes) + geom_histogram(aes(x = sbp), 
                                       col = "black", 
                                       fill = "white")
```

For categorical or binary variable, bar charts are usually the easiest way to go. You can use the `barplot()` function in base R. 

```{r}
# barplot for the income variable in base R
# You can also use prop.table(table()) instead of table() for plotting proportions
barplot(table(nhanes$income), 
        xlab = "Income", ylab = "Frequency")

# barplot for the income variable using ggplot 
# remove the NAs if needed, otherwise they will show up with their own bar
ggplot(data = subset(nhanes, complete.cases(income))) + 
  geom_bar(aes(x = income))
```

# Creating a Table 1 using gtsummary

In most published articles containing statistical analyses, there is a table containing descriptive statistics for the sample, typically referred to as "Table 1". Since it's so common, there are several packages in R that facilitate the creation of a Table 1 for you. We will focus on the one in the `gtsummary` package, as your textbook uses, but will mention other popular solutions as well.

## Overall 

This method creates a table of descriptive statistics for the entire sample. 

### Default Settings 

```{r}
# Create the Overall Table 1 using gtsummary 

nhanes %>% 
  # Select the variables to be included in the table
  select(sbp, RIDAGEYR, RIAGENDR, income) %>%
  tbl_summary(
    # the following code can be included to override including missing values in the table:
    # missing = "no"
  )
```

### Using the additional options in tbl_summary

There are many ways to customize your table, including which statistic is shown for each variale, how many digits to round to, etc. Below is an example customizing some of the options. You can type `?tbl_summary` into your R console to see the options.

```{r}
nhanes %>% 
  select(sbp, RIDAGEYR, RIAGENDR, income) %>%
  subset(complete.cases(sbp, RIDAGEYR, RIAGENDR, income)) %>% 
  tbl_summary(
    statistic = list(all_continuous()  ~ "{mean} ({sd})",
                     all_categorical() ~ "{n}    ({p}%)"),
    digits = list(all_continuous()  ~ c(2, 2),
                  all_categorical() ~ c(0, 1)),
    type = list(sbp      ~ "continuous",
                RIDAGEYR ~ "continuous",
                RIAGENDR ~ "categorical",
                income   ~ "categorical"),
    label  = list(sbp      ~ "SBP (mmHg)",
                  RIDAGEYR ~ "Age (years)",
                  RIAGENDR ~ "Gender",
                  income   ~ "Annual Income"), 
    
  ) %>%
  modify_header(label = "**Variable**") %>%
  modify_caption("Participant characteristics  (complete case analysis)") %>%
  bold_labels()
```

## By Exposure or Outcome 

It is also common to display descriptive statistics stratified by some sort of subgroup, usually either the main outcome or exposure. If the variable of interest for stratification is continuous, it is typically discretized just for the purposes of the Table 1, and used as continuous in the subsequent analyses.Below is an example of stratifying by gender. 

```{r}
TABLE1 <- nhanes %>% 
  select(sbp, RIDAGEYR, RIAGENDR, income) %>%
  subset(complete.cases(sbp, RIDAGEYR, RIAGENDR, income)) %>% 
  tbl_summary(
    # The "by" variable
    by = RIAGENDR,
    statistic = list(all_continuous()  ~ "{mean} ({sd})",
                     all_categorical() ~ "{n}    ({p}%)"),
    digits = list(all_continuous()  ~ c(2, 2),
                  all_categorical() ~ c(0, 1)),
    type = list(sbp      ~ "continuous",
                RIDAGEYR ~ "continuous",
                income   ~ "categorical"),
    label  = list(sbp      ~ "SBP (mmHg)",
                  RIDAGEYR ~ "Age (years)",
                  income   ~ "Annual Income")
  ) %>%
  modify_header(
    label = "**Variable**",
    # The following adds the % to the column total label
    # <br> is the location of a line break
    all_stat_cols() ~ "**{level}**<br>N = {n} ({style_percent(p, digits=1)}%)"
  ) %>%
  modify_caption("Participant characteristics, by gender") %>%
  bold_labels()  %>%
  # Include an "overall" column
  add_overall(
    last = FALSE,
    # The ** make it bold
    col_label = "**All participants**<br>N = {N}"
  )
TABLE1
```

## Exporting to an external file 

It is easy to export these tables to an external file, for sharing purposes. The following code shows how to save as a word document (using the `flextable` package) or html (using the `gt` package). 

```{r}
TABLE1 %>% 
  as_flex_table() %>% 
  save_as_docx(path = here("01-DescriptivePresentationOfVariables", 
                           "01-gtsummaryTable1.docx"))

TABLE1 %>% 
  as_gt() %>% 
  gtsave(filename = here("01-DescriptivePresentationOfVariables", 
                           "01-gtsummaryTable1.html"))
```

## Adding p-values to Table 1

TLDR; it is not recommended to add p-values to Table 1, but you can do it easily. Consult the textbook for more details.

# Other packages to create Table 1 in R 

There are several other packages that can help to create your Table 1 in R, including `flextable`, `tableone`, and `table1`. I will show brief examples of how to use `table1`, my personal package of choice for Table 1 creation, and `tableone`.  

## table1

```{r}
##### complete cases for nhanes table 1 #####
nhanes_table1 = nhanes %>% 
  select(sbp, RIDAGEYR, RIAGENDR, income) %>%
  subset(complete.cases(sbp, RIDAGEYR, RIAGENDR, income))

##### Variable Name Labels #####
labels <- list(
  variables = list(sbp = "SBP (mmHg)",
                  RIDAGEYR = "Age (years)",
                  income   = "Annual Income"),
  groups = list("", "Gender")
)

##### Stratify by Gender #####
strata <- c(list(Overall=nhanes_table1), 
            split(nhanes_table1, nhanes_table1$RIAGENDR))

##### Create the Table #####
table1 = table1(strata, labels, groupspan = c(1, 2))
table1

##### Export to html #####
table1 %>% t1flex %>% 
  save_as_html(path = here("01-DescriptivePresentationOfVariables", 
                           "01-table1.html"))
```

## tableone

```{r}
##### Label Variables #####
var_label(nhanes_table1$RIAGENDR) <- "Gender"
var_label(nhanes_table1$RIDAGEYR) <- "Age"
var_label(nhanes_table1$sbp) <- "SBP"
var_label(nhanes_table1$income) <- "Annual Income"

##### Create variable list #####
# include the variables you want as the rows for the table
vars <- colnames(nhanes_table1 %>% select(-RIAGENDR))

##### Create the Table #####
tableone = CreateTableOne(vars = vars, 
                          strata = "RIAGENDR", 
                          data = nhanes_table1, 
                          addOverall = TRUE # keep the overall column
                          )

##### Print the Table #####
print(tableone, 
      smd = TRUE, 
      varLabels = TRUE, # show standardized mean difference
      showAllLevels = TRUE)
```


# Session information

```{r echo = FALSE, results = 'markup'}
sessionInfo()
```

